#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('app:server');
const http = require('http');
const cors = require('cors'); //add
app.use(cors()); //add

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * socket.io.
 */

const io = require('socket.io')(server, {
  cors: true,
  origins: 'http://localhost:8080',
});
io.on('connection', socket => {
  console.log('connected!!!');
  socket.on('UPDATE_ROOM', id => {
    console.log('room updated!!!');
    io.emit('UPDATE_ROOM', id);
  });
  socket.on('ENTER_ROOM', () => {
    console.log('guest enter!!!');
    io.emit('ENTER_ROOM');
  });
  socket.on('UPDATE_BOARD', id => {
    console.log('update board!!!');
    io.emit('UPDATE_BOARD', id);
  });
  socket.on('SEND_MESSAGE', () => {
    console.log('send message!!!');
    io.emit('SEND_MESSAGE');
  });
  socket.on('START_GAME', id => {
    console.log('game start!!!');
    io.emit('START_GAME', id);
  });
  socket.on('DELETE_ROOM', id => {
    console.log('delete room!!!');
    io.emit('DELETE_ROOM', id);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
